[
  {
    "criterion_name": "Production Code: Code Readability",
    "max_points": 1.0,
    "specific_prompt": "Evaluate the 'Code Readability' of the refactored production code.\n\n**Assessment Guidelines:**\n- **Excellent (1.0 pts):** Uses meaningful method and variable names consistently, follows common coding conventions, and effectively eliminates code duplication.\n- **Satisfactory (0.5 pts):** Some naming inconsistencies or minor code duplication remains. Conventions might be partially followed.\n- **Needs Improvement (0 pts):** Poor or unclear naming conventions are prevalent, or significant code duplication is present, making the code hard to understand.\n\nFocus on: Naming of variables, methods, and classes/modules; adherence to style conventions; and the extent to which repetitive code blocks have been consolidated."
  },
  {
    "criterion_name": "Production Code: Code Structure",
    "max_points": 1.0,
    "specific_prompt": "Evaluate the 'Code Structure' of the refactored production code.\n\n**Assessment Guidelines:**\n- **Excellent (1.0 pts):** Exhibits a logical and modular structure. Code is well-organized into appropriate functions/methods and potentially classes/modules, making it easy to follow and understand.\n- **Satisfactory (0.5 pts):** The structure is mostly logical, but there are areas where modularity or clarity could be improved (e.g., overly long methods, somewhat tangled logic).\n- **Needs Improvement (0 pts):** The code is disorganized, lacks a clear modular structure, or is generally difficult to follow due to poor organization.\n\nFocus on: How code is broken down into smaller units; the logical flow; separation of concerns; and overall ease of navigation through the codebase."
  },
  {
    "criterion_name": "Production Code: Refactoring Best Practices",
    "max_points": 1.0,
    "specific_prompt": "Evaluate the adherence to 'Refactoring Best Practices' in the production code, specifically referencing the 'refactoring_steps_gilded_rose.md' guide.\n\n**Assessment Guidelines:**\n- **Excellent (1.0 pts):** Follows all or nearly all steps detailed in the 'refactoring_steps_gilded_rose.md' guide accurately. The refactoring clearly achieves the intended improvements without deviating from the guide's principles for these steps. No deviation from intended behavior as a result of applying these steps.\n- **Satisfactory (0.5 pts):** Most steps from the guide are followed, but there might be minor deviations, omissions, or steps that are not fully implemented as intended. The core refactoring goals are partially met.\n- **Needs Improvement (0 pts):** Incomplete or incorrect application of the guide's steps. Significant steps may be missing, or the refactoring attempts do not align well with the guide's instructions.\n\nFocus on: Evidence of applying techniques like replacing magic numbers/strings with constants, extracting methods to remove duplication, restructuring control flow for clarity, and adding domain-specific helper methods as outlined in the guide."
  },
  {
    "criterion_name": "Production Code: Maintainability",
    "max_points": 1.0,
    "specific_prompt": "Evaluate the 'Maintainability' of the refactored production code.\n\n**Assessment Guidelines:**\n- **Excellent (1.0 pts):** The refactored code is easy to maintain, extend with new features, and reuse components if necessary. Changes are localized and have minimal ripple effects.\n- **Satisfactory (0.5 pts):** The code is generally maintainable, but certain areas could be simplified or better structured to improve ease of future modifications.\n- **Needs Improvement (0 pts):** The code is difficult to maintain. It may be fragile (small changes risk breaking functionality), hard to understand for modifications, or tightly coupled, making extensions difficult.\n\nFocus on: Simplicity, clarity, low coupling, high cohesion, and how easy it would be for another developer to understand and modify the code."
  },
  {
    "criterion_name": "Production Code: Preservation of Behavior",
    "max_points": 1.0,
    "specific_prompt": "Evaluate the 'Preservation of Behavior' after refactoring the production code. This is typically verified by running the test suites.\n\n**Assessment Guidelines:**\n- **Excellent (1.0 pts):** All provided or student-created tests (relevant to the refactored code, likely Test Suite 2) pass. The functional behavior of the system is fully preserved after refactoring.\n- **Satisfactory (0.5 pts):** Minor, unintended behavior changes are present, or some tests (from Test Suite 2) fail, indicating small deviations from the original behavior.\n- **Needs Improvement (0 pts):** Significant behavior changes have been introduced, or a notable number of tests (from Test Suite 2) fail, indicating the refactoring has broken key functionality.\n\nFocus on: The outcome of running the post-refactoring test suite (Test Suite 2) against the refactored production code. The primary concern is whether the system does the same thing it did before refactoring."
  }
]