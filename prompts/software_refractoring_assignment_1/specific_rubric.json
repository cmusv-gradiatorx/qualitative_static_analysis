[
  {
    "criterion_name": "Production Code: Code Readability",
    "max_points": 1.0,
    "specific_prompt": "Evaluate the 'Code Readability' of the refactored production code.\n\n**Assessment Guidelines:**\n- **Excellent (1.0 pts):** Uses meaningful method and variable names consistently, follows common coding conventions, and effectively eliminates code duplication.\n- **Satisfactory (0.5 pts):** Some naming inconsistencies or minor code duplication remains. Conventions might be partially followed.\n- **Needs Improvement (0 pts):** Poor or unclear naming conventions are prevalent, or significant code duplication is present, making the code hard to understand.\n\nFocus on: Naming of variables, methods, and classes/modules; adherence to style conventions; and the extent to which repetitive code blocks have been consolidated."
  },
  {
    "criterion_name": "Production Code: Code Structure",
    "max_points": 1.0,
    "specific_prompt": "Evaluate the 'Code Structure' of the refactored production code.\n\n**Assessment Guidelines:**\n- **Excellent (1.0 pts):** Exhibits a logical and modular structure. Code is well-organized into appropriate functions/methods and potentially classes/modules, making it easy to follow and understand.\n- **Satisfactory (0.5 pts):** The structure is mostly logical, but there are areas where modularity or clarity could be improved (e.g., overly long methods, somewhat tangled logic).\n- **Needs Improvement (0 pts):** The code is disorganized, lacks a clear modular structure, or is generally difficult to follow due to poor organization.\n\nFocus on: How code is broken down into smaller units; the logical flow; separation of concerns; and overall ease of navigation through the codebase."
  },
  {
    "criterion_name": "Production Code: Refactoring Best Practices",
    "max_points": 1.0,
    "specific_prompt": "Evaluate the adherence to 'Refactoring Best Practices' in the production code, specifically referencing the 'refactoring_steps_gilded_rose.md' guide.\n\n**Assessment Guidelines:**\n- **Excellent (1.0 pts):** Follows all or nearly all steps detailed in the 'refactoring_steps_gilded_rose.md' guide accurately. The refactoring clearly achieves the intended improvements without deviating from the guide's principles for these steps. No deviation from intended behavior as a result of applying these steps.\n- **Satisfactory (0.5 pts):** Most steps from the guide are followed, but there might be minor deviations, omissions, or steps that are not fully implemented as intended. The core refactoring goals are partially met.\n- **Needs Improvement (0 pts):** Incomplete or incorrect application of the guide's steps. Significant steps may be missing, or the refactoring attempts do not align well with the guide's instructions.\n\nFocus on: Evidence of applying techniques like replacing magic numbers/strings with constants, extracting methods to remove duplication, restructuring control flow for clarity, and adding domain-specific helper methods as outlined in the guide."
  },
  {
    "criterion_name": "Production Code: Maintainability",
    "max_points": 1.0,
    "specific_prompt": "Evaluate the 'Maintainability' of the refactored production code.\n\n**Assessment Guidelines:**\n- **Excellent (1.0 pts):** The refactored code is easy to maintain, extend with new features, and reuse components if necessary. Changes are localized and have minimal ripple effects.\n- **Satisfactory (0.5 pts):** The code is generally maintainable, but certain areas could be simplified or better structured to improve ease of future modifications.\n- **Needs Improvement (0 pts):** The code is difficult to maintain. It may be fragile (small changes risk breaking functionality), hard to understand for modifications, or tightly coupled, making extensions difficult.\n\nFocus on: Simplicity, clarity, low coupling, high cohesion, and how easy it would be for another developer to understand and modify the code."
  },
  {
    "criterion_name": "Production Code: Preservation of Behavior",
    "max_points": 1.0,
    "specific_prompt": "Evaluate the 'Preservation of Behavior' after refactoring the production code. This is typically verified by running the test suites.\n\n**Assessment Guidelines:**\n- **Excellent (1.0 pts):** All provided or student-created tests (relevant to the refactored code, likely Test Suite 2) pass. The functional behavior of the system is fully preserved after refactoring.\n- **Satisfactory (0.5 pts):** Minor, unintended behavior changes are present, or some tests (from Test Suite 2) fail, indicating small deviations from the original behavior.\n- **Needs Improvement (0 pts):** Significant behavior changes have been introduced, or a notable number of tests (from Test Suite 2) fail, indicating the refactoring has broken key functionality.\n\nFocus on: The outcome of running the post-refactoring test suite (Test Suite 2) against the refactored production code. The primary concern is whether the system does the same thing it did before refactoring."
  },
  {
    "criterion_name": "Test Code: Completeness of Test Suite 1",
    "max_points": 1.0,
    "specific_prompt": "Evaluate the 'Completeness of Test Suite 1' written for the *original, non-refactored* Gilded Rose system.\n\n**Assessment Guidelines:**\n- **Excellent (1.0 pts):** Test Suite 1 thoroughly tests all relevant methods, behaviors (quality increases/decreases), special items (Aged Brie, Sulfuras, Backstage passes), quality constraints (max/min), and edge cases (e.g., expired items) of the original system.\n- **Satisfactory (0.5 pts):** Test Suite 1 covers most core logic and common behaviors but misses some important edge cases, boundary conditions, or specific item behaviors.\n- **Needs Improvement (0 pts):** Test Suite 1 provides incomplete or superficial test coverage, missing significant portions of the system's logic or critical scenarios.\n\nFocus on: Coverage of different item types, quality update rules, sellIn decrements, quality boundaries (0 and 50), and behavior at and after sellIn date passes 0."
  },
  {
    "criterion_name": "Test Code: Correctness of Test Logic",
    "max_points": 1.0,
    "specific_prompt": "Evaluate the 'Correctness of Test Logic' in both Test Suite 1 and Test Suite 2. This refers to whether the assertions and expectations in the tests accurately reflect the system's specified behavior.\n\n**Assessment Guidelines:**\n- **Excellent (1.0 pts):** Test cases consistently reflect the correct expected output for each scenario they cover. Assertions are accurate and verify the intended behavior precisely.\n- **Satisfactory (0.5 pts):** Test logic is mostly correct, but there are some minor logical flaws in a few test cases, or assertions might not be perfectly aligned with the expected outcomes in all situations.\n- **Needs Improvement (0 pts):** Test cases contain incorrect logic or assertions that are inconsistent with the actual specified behavior of the system. Expected outcomes are frequently wrong.\n\nFocus on: The assertions made in the tests. Do they check for the right values given the inputs and the Gilded Rose rules?"
  },
  {
    "criterion_name": "Test Code: Code Quality & Organization",
    "max_points": 1.0,
    "specific_prompt": "Evaluate the 'Code Quality & Organization' of the test suites (primarily Test Suite 2, but good practices in Test Suite 1 are also valued).\n\n**Assessment Guidelines:**\n- **Excellent (1.0 pts):** Test code is well-structured, modular (e.g., use of helper methods for setup or common assertions), and highly readable. Test names are descriptive.\n- **Satisfactory (0.5 pts):** There are some structure issues in the test code, or unnecessary repetition exists. Readability could be improved, or test names might be somewhat unclear.\n- **Needs Improvement (0 pts):** Test code is messy, disorganized, hard to read, or contains excessive duplication, making it difficult to understand or maintain.\n\nFocus on: Readability, use of helper functions to avoid repetition, logical grouping of tests, clarity of test names, and overall maintainability of the test code itself."
  },
  {
    "criterion_name": "Test Code: Use of Parameterized Tests",
    "max_points": 1.0,
    "specific_prompt": "Evaluate the 'Use of Parameterized Tests' (or similar data-driven testing techniques) in the test suites, especially where they can reduce redundancy.\n\n**Assessment Guidelines:**\n- **Excellent (1.0 pts):** Parameterized tests (or equivalent data-driven approaches) are used effectively to test various scenarios with different inputs/outputs, significantly reducing redundancy and improving test clarity.\n- **Satisfactory (0.5 pts):** Some use of parameterization is evident, but there are still noticeable instances of repeated test structures or assert blocks that could have been consolidated using parameterization.\n- **Needs Improvement (0 pts):** Does not use parameterized tests where they would be clearly beneficial, leading to highly redundant test methods or blocks of assertions.\n\nFocus on: Identifying situations where multiple tests check similar logic with different data, and whether parameterization was used to handle these efficiently."
  },
  {
    "criterion_name": "Test Code: Test Suite 2 Refactoring",
    "max_points": 1.0,
    "specific_prompt": "Evaluate the 'Test Suite 2 Refactoring'. This assesses how well the original test suite (Test Suite 1) was refactored to create Test Suite 2, aligning it with the refactored production code.\n\n**Assessment Guidelines:**\n- **Excellent (1.0 pts):** Test Suite 2 is meaningfully refactored. Tests match the structure and improved quality of the refactored production code. Improvements (e.g., clearer names, use of helpers reflecting new production code structure, logical grouping) are evident and clean.\n- **Satisfactory (0.5 pts):** Some cleanup or refactoring has been applied to Test Suite 1 to create Test Suite 2, but the test structure still lacks full alignment with the refactored production code, or the improvements are superficial.\n- **Needs Improvement (0 pts):** Test Suite 2 shows little to no refactoring from Test Suite 1, or it remains poorly aligned with the structure and improvements made in the refactored production system. It might largely be a copy of Test Suite 1 with minimal changes.\n\nFocus on: Changes made from Test Suite 1 to Test Suite 2. Do test names reflect new method names in production code? Do tests leverage new helper methods from production code if appropriate? Is Test Suite 2 easier to read and maintain than Test Suite 1, and does it better reflect the new system design?"
  }
]