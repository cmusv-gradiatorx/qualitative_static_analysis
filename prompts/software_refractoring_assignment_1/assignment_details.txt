Gilded Rose Refactoring Assignment (Fall’25 Version)
Objective
This assignment aims at refractoring a Java based code base called Gilded rose. You will:
Refactor the production code to improve readability and maintainability by following the provided refactoring steps.
Create a comprehensive test suite for the refractored code.
Your goal is to preserve system behavior while enhancing code clarity and test structure.

Tasks

1) Refactor the System
Follow the step-by-step guide in the provided file (refactoring_steps_gilded_rose.md)
Focus on the following:
Replace magic numbers and strings with constants (e.g., MAX_QUALITY, AGED_BRIE)
Extract methods to remove code duplication (incrementItemQuality(), decrementItemQuality(), etc.)
Restructure control flow for clarity
Add domain-specific helper methods (e.g., updateQualityForItemsThatAgeWell())

2) Write a comprehensive test suite:
Ensure it captures all observed behaviors, including:
Quality increases and decreases
Behavior of special items (e.g., “Aged Brie”, “Sulfuras”, “Backstage passes”)
Quality constants (e.g., max and min quality constraints)
Edge cases (e.g., expired items)


Submission Instructions
Submit:
src/: Your full refactored source code
test/: Your test suite 1 (pre-refactoring) and test suite 2 (post-refactoring)
README.md: A short description of your approach and any assumptions
refactoring_steps_gilded_rose.md: The guide (for completeness) with the steps used to refactor the test suite.

Details about the project Gilded Rose:

========================================
REPOSITORY README
========================================
Hi and welcome to team Gilded Rose. As you know, we are a small inn with a prime location in a prominent city ran by a friendly innkeeper named Allison. We also buy and sell only the finest goods. Unfortunately, our goods are constantly degrading in quality as they approach their sell by date. We have a system in place that updates our inventory for us. It was developed by a no-nonsense type named Leeroy, who has moved on to new adventures. Your task is to refactor the code, so we can add a new feature to our system that will allow us to sell a new category of items.

First an introduction to our system:

All items have a SellIn value which denotes the number of days we have to sell the item
All items have a Quality value which denotes how valuable the item is
At the end of each day our system lowers both values for every item
Pretty simple, right? Well this is where it gets interesting:

Once the sell by date has passed, Quality degrades twice as fast
The Quality of an item is never negative
"Aged Brie" actually increases in Quality the older it gets
The Quality of an item is never more than 50
"Sulfuras", being a legendary item, never has to be sold or decreases in Quality
"Backstage passes", like aged brie, increases in Quality as it's SellIn value approaches; Quality increases by 2 when there are 10 days or less and by 3 when there are 5 days or less but Quality drops to 0 after the concert.
Task
Before adding the modifications that the customer wishes you to implement, you need to refactor the GildedRose class to improve its readability and understandability. Feel free to make any changes to the GildedRose.updateQuality method and add any new code as long as everything still works correctly. However, do not alter the Item class or Items property.

==========================================
Code base(This is before the student's refractor):

This file is a merged representation of the entire codebase, combined into a single document by Repomix.
The content has been processed where security check has been disabled.

# File Summary

## Purpose
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

## File Format
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  a. A header with the file path (## File: path/to/file)
  b. The full contents of the file in a code block

## Usage Guidelines
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

## Notes
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Security check has been disabled - content may contain sensitive information
- Files are sorted by Git change count (files with more changes are at the bottom)

# Directory Structure
```
GildedRoseKata-master/
  gradle/
    wrapper/
      gradle-wrapper.properties
  src/
    main/
      java/
        com/
          gildedrose/
            GildedRose.java
            Item.java
    test/
      java/
        com/
          gildedrose/
            GildedRoseTest.java
```

# Files

## File: GildedRoseKata-master/gradle/wrapper/gradle-wrapper.properties
```
distributionBase=GRADLE_USER_HOME
distributionPath=wrapper/dists
distributionUrl=https\://services.gradle.org/distributions/gradle-7.1-bin.zip
zipStoreBase=GRADLE_USER_HOME
zipStorePath=wrapper/dists
```

## File: GildedRoseKata-master/src/main/java/com/gildedrose/GildedRose.java
```java
package com.gildedrose;

class GildedRose {
    Item[] items;

    public GildedRose(Item[] items) {
        this.items = items;
    }

    public void updateQuality() {
        for (int i = 0; i < items.length; i++) {
            if (!items[i].name.equals("Aged Brie")
                    && !items[i].name.equals("Backstage passes to a concert")) {
                if (items[i].quality > 0) {
                    if (!items[i].name.equals("Sulfuras, Hand of Ragnaros")) {
                        items[i].quality = items[i].quality - 1;
                    }
                }
            } else {
                if (items[i].quality < 50) {
                    items[i].quality = items[i].quality + 1;

                    if (items[i].name.equals("Backstage passes to a concert")) {
                        if (items[i].sellIn < 11) {
                            if (items[i].quality < 50) {
                                items[i].quality = items[i].quality + 1;
                            }
                        }

                        if (items[i].sellIn < 6) {
                            if (items[i].quality < 50) {
                                items[i].quality = items[i].quality + 1;
                            }
                        }
                    }
                }
            }

            if (!items[i].name.equals("Sulfuras, Hand of Ragnaros")) {
                items[i].sellIn = items[i].sellIn - 1;
            }

            if (items[i].sellIn < 0) {
                if (!items[i].name.equals("Aged Brie")) {
                    if (!items[i].name.equals("Backstage passes to a concert")) {
                        if (items[i].quality > 0) {
                            if (!items[i].name.equals("Sulfuras, Hand of Ragnaros")) {
                                items[i].quality = items[i].quality - 1;
                            }
                        }
                    } else {
                        items[i].quality = items[i].quality - items[i].quality;
                    }
                } else {
                    if (items[i].quality < 50) {
                        items[i].quality = items[i].quality + 1;
                    }
                }
            }
        }
    }
}
```

## File: GildedRoseKata-master/src/main/java/com/gildedrose/Item.java
```java
package com.gildedrose;


public class Item {

    public String name;

    public int sellIn;

    public int quality;

    public Item(String name, int sellIn, int quality) {
        this.name = name;
        this.sellIn = sellIn;
        this.quality = quality;
    }

    @Override
    public String toString() {
        return this.name + ", " + this.sellIn + ", " + this.quality;
    }
}
```

## File: GildedRoseKata-master/src/test/java/com/gildedrose/GildedRoseTest.java
```java
package com.gildedrose;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public class GildedRoseTest {

    @Test
    public void food() {
        Item[] items = new Item[] {
                new Item("cake", 0, 0)
        };

        GildedRose gildedRose = new GildedRose(items);

        gildedRose.updateQuality();

        Assertions.assertEquals("fixme", gildedRose.items[0].name);
    }
}
```
================================================================

The above code base is pre refractor