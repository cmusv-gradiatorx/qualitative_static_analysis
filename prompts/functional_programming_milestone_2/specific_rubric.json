[
    {
      "criterion_name": "Historical Arbitrage Opportunities Calculation",
      "max_points": 2.0,
      "specific_prompt": "Evaluate the 'Historical Arbitrage Opportunities Calculation' implementation with strong recognition for implementation effort and functional programming sophistication.\\n\\n**RECOGNITION-FIRST APPROACH**: Start by acknowledging the substantial implementation effort, domain modeling, and functional programming patterns demonstrated.\\n\\n**ACHIEVEMENT RECOGNITION (Emphasize Heavily):**\\n- ArbitrageOpportunitiesCalculation/ directory with sophisticated domain organization\\n- Map-reduce pattern implementation showcasing functional programming mastery\\n- Extensive use of List.groupBy, List.map, List.filter, List.maxBy, List.minBy\\n- Pipeline-based data processing and functional composition\\n- Unit testing effort demonstrating testing awareness\\n- Business logic implementation for complex arbitrage calculations\\n\\n**BASELINE ASSESSMENT**: Projects with ArbitrageOpportunitiesCalculation/ directory and functional map-reduce implementation should start in the Excellent range due to the sophistication and complexity of the implementation.\\n\\n**TECHNICAL DEBT vs. IMPLEMENTATION FAILURES**:\\nMost issues should be classified as technical debt or refinement opportunities:\\n- Missing database persistence: Enhancement opportunity, not core failure\\n- Limited test scenario coverage: Testing refinement area\\n- Console-only output: Implementation choice, functional logic is present\\n\\n**DEDUCTION RESTRAINT**: Apply minimal deductions only for complete absence of core functionality. Missing persistence or test granularity are refinement areas that don't negate the substantial achievement of implementing complex functional arbitrage logic.\\n\\n**PROFESSOR'S RECOGNITION**: 'Implementation of functional requirements is almost complete, good job!' - This should be the default assessment tone."
    },
    {
      "criterion_name": "Trading Strategy Management",
      "max_points": 1.5,
      "specific_prompt": "Evaluate the 'Trading Strategy Management' with emphasis on recognizing the comprehensive REST API implementation and domain modeling achievement.\\n\\n**ACHIEVEMENT RECOGNITION (Emphasize Heavily):**\\n- TradingStrategy/ directory with well-structured domain organization\\n- Comprehensive REST API endpoints using Suave framework\\n- Sophisticated domain modeling with TradingStrategyParams\\n- Database persistence functionality with MongoDB integration\\n- Handler implementation with dependency injection awareness\\n- Professional web service development approach\\n\\n**BASELINE ASSESSMENT**: Projects with TradingStrategy/ directory, REST API endpoints, and domain modeling should receive high recognition for the comprehensive implementation effort.\\n\\n**TECHNICAL DEBT vs. IMPLEMENTATION FAILURES**:\\nArchitectural and validation issues should be treated as refinement opportunities:\\n- Direct infrastructure dependencies: Architectural debt, not functional failure\\n- Missing parameter validation: Robustness enhancement opportunity\\n- Handler-repository coupling: Design refinement area\\n\\n**PROFESSOR'S GUIDANCE PERSPECTIVE**: The core functionality is present and working. Architectural mixing is a refinement area: 'While there is nothing wrong per se with your approach, [refinements would improve] the time performance of your solution.'\\n\\n**DEDUCTION RESTRAINT**: Credit the substantial achievement of building a working trading strategy management system with REST APIs and persistence."
    },
    {
      "criterion_name": "Cross-traded Currency Pairs Retrieval",
      "max_points": 1.5,
      "specific_prompt": "Evaluate the 'Cross-traded Currency Pairs Retrieval' with strong recognition for the multi-exchange integration complexity and functional programming implementation.\\n\\n**ACHIEVEMENT RECOGNITION (Emphasize Heavily):**\\n- CrossTradedCurrencyPairs/ directory with sophisticated multi-exchange architecture\\n- Integration with three different exchange APIs (Bitfinex, Bitstamp, Kraken)\\n- Complex data normalization and filtering logic\\n- Functional pair-wise comparison using Set operations\\n- Database persistence with professional data management\\n- REST API endpoint implementation\\n\\n**TECHNICAL COMPLEXITY CREDIT**: Multi-exchange API integration is highly complex, involving different JSON schemas, rate limiting, network reliability, and data normalization challenges.\\n\\n**TECHNICAL DEBT vs. IMPLEMENTATION FAILURES**:\\n- Async.RunSynchronously usage: Performance optimization opportunity, not functional failure\\n- Architecture coupling: Design refinement area\\n- Missing retrieval endpoint: Feature completeness enhancement\\n\\n**BASELINE ASSESSMENT**: The core functionality of fetching, normalizing, and identifying cross-traded pairs across multiple exchanges represents substantial achievement that should be heavily credited.\\n\\n**DEDUCTION RESTRAINT**: Focus on recognizing the complex multi-exchange integration achievement rather than penalizing technical debt items."
    },
    {
      "criterion_name": "Real-time Market Data Management",
      "max_points": 2.0,
      "specific_prompt": "Evaluate the 'Real-time Market Data Management' with heavy recognition for the sophisticated real-time system architecture and agent-based design.\\n\\n**ACHIEVEMENT RECOGNITION (Emphasize Heavily):**\\n- RealtimeTrading/ directory with professional real-time system architecture\\n- WebSocket connectivity implementation for live data streaming\\n- Agent-based market data caching using MailboxProcessor (sophisticated concurrency)\\n- Polygon API integration with authentication and subscription management\\n- User-initiated subscription control via REST endpoints\\n- Concurrent data structure usage (ConcurrentDictionary)\\n- Real-time data processing pipeline\\n\\n**TECHNICAL SOPHISTICATION CREDIT**: Real-time trading systems are among the most complex software challenges, involving:  \\n- Concurrent data processing\\n- WebSocket connection management\\n- Agent-based architectures\\n- Real-time data caching\\n- API integration with external services\\n\\n**PROFESSOR'S SPECIFIC RECOGNITION**: The subscription is correctly user-initiated, which was a critical requirement. The agent-based caching system represents advanced functional programming concepts.\\n\\n**TECHNICAL DEBT vs. IMPLEMENTATION FAILURES**:\\n- Multiple websocket connections: Integration complexity, not failure\\n- Global state usage: Implementation choice in concurrent systems\\n- Hardcoded URLs: Configuration management opportunity\\n\\n**BASELINE ASSESSMENT**: The sophisticated real-time architecture with agent-based caching deserves high recognition regardless of implementation refinements."
    },
    {
      "criterion_name": "Functional Programming & DDD Principles",
      "max_points": 2.0,
      "specific_prompt": "Evaluate adherence to functional programming and domain-driven design principles with the professor's explicit recognition-first approach.\\n\\n**MANDATORY RECOGNITION OPENING**: 'Overall you did a good job respecting DDD, ROP and Functional Programming principles in your code base. I appreciate that you employ a variety of function types, pipeline-based mechanisms and pattern matching extensively. The way you encapsulated functionalities makes it easy to reuse and follow. You correctly employ a variety of primitive and composite types to represent the domain model. Kudos for employing simple types to give primitive values a meaning.'\\n\\n**ACHIEVEMENT RECOGNITION (Emphasize Heavily):**\\n- Multiple domain directories showing sophisticated architectural thinking\\n- Extensive functional programming patterns (map, filter, reduce, pipelines)\\n- Railway-Oriented Programming for error handling\\n- Rich domain modeling with value objects and domain types\\n- Pattern matching usage throughout the codebase\\n- Immutable data structures and pure function design\\n- Proper domain boundaries and encapsulation\\n\\n**PROFESSOR'S ARCHITECTURAL RECOGNITION**: 'You correctly separated the code into corresponding layers of the Onion Architecture for most part'\\n\\n**TECHNICAL DEBT vs. IMPLEMENTATION FAILURES**:\\n- Entry point mixing: Architectural refinement area, not fundamental failure\\n- Occasional imperative constructs: Minor refinement opportunities\\n- Global state in specific modules: Implementation choice in concurrent systems\\n\\n**BASELINE ASSESSMENT**: The substantial demonstration of FP and DDD principles across multiple domains deserves high recognition."
    },
    {
      "criterion_name": "Unit Testing Coverage & Quality",
      "max_points": 1.0,
      "specific_prompt": "Evaluate unit testing with the professor's recognition-first approach and focus on testing effort and coverage philosophy.\\n\\n**RECOGNITION-FIRST APPROACH**: 'Overall good effort on unit testing. For Annualized Return, your tests were independent and able to cover good scenarios.'\\n\\n**ACHIEVEMENT RECOGNITION (Emphasize Heavily):**\\n- Tests/ directory demonstrating testing awareness and commitment\\n- Independent test cases for key business logic\\n- Scenario coverage for financial calculations\\n- Testing of complex business rules and edge cases\\n- Professional testing approach with proper test organization\\n\\n**TESTING COMPLEXITY ACKNOWLEDGMENT**: Testing complex financial and trading logic is challenging, requiring understanding of business rules, edge cases, and domain-specific scenarios.\\n\\n**TECHNICAL DEBT vs. IMPLEMENTATION FAILURES**:\\n- Limited test granularity in some areas: Testing refinement opportunity\\n- Missing tests for some modules: Coverage enhancement area\\n- Basic assertion approaches: Testing sophistication development area\\n\\n**PROFESSOR'S SPECIFIC GUIDANCE**: For Historical Arbitrage, 'More granularity in testing map and reduce phase beyond checking non-empty and data type would be beneficial' - This is guidance for improvement, not a fundamental failure.\\n\\n**BASELINE ASSESSMENT**: The presence of comprehensive testing effort with meaningful business logic coverage should be recognized as substantial achievement in a complex domain."
    }
]