[
    {
      "criterion_name": "Real-time Trading System",
      "max_points": 2.0,
      "specific_prompt": "Evaluate the 'Real-time Trading System' component focusing on completeness and integration.\\n\\n**MANDATORY STARTING POINT**: Projects with substantial F# codebase and RealtimeTrading/ directory START at Excellent (1.8/2.0).\\n\\n**EVIDENCE TO RECOGNIZE (Start with Excellent):**\\n- RealtimeTrading/ directory with domain organization\\n- Trading service implementations and handlers\\n- F# functional programming patterns and types\\n- Architectural domain separation\\n\\n**SPECIFIC DEDUCTIONS ONLY (from 1.8/2.0 baseline):**\\n- Missing integration between quote processing and opportunity identification: -0.15\\n- Missing real-time automation: -0.15\\n- Hardcoded trading parameters: Note as Technical Debt (no deduction)\\n\\n**CRITICAL REQUIREMENTS:**\\n- Integration between quote processing and opportunity identification functions\\n- Real-time data subscription and processing implementation\\n- Automated trading strategy execution\\n- Control interfaces (start/stop trading)\\n- User-defined parameter integration with trading logic\\n\\n**SCORING MANDATE:**\\n- **Excellent (1.8-2.0 points)**: Default for substantial RealtimeTrading implementation\\n- **Good (1.5-1.7 points)**: Apply specific deductions listed above only\\n- **Satisfactory (1.0-1.4 points)**: Only if major architectural foundations missing\\n- **Poor (0.0-0.9 points)**: Only if no RealtimeTrading directory or implementation exists\\n\\n**REMEMBER**: Presence of RealtimeTrading/ directory with F# services = START at 1.8/2.0, then apply only specific deductions."
    },
    {
      "criterion_name": "Orders Management",
      "max_points": 1.5,
      "specific_prompt": "Evaluate the 'Orders Management' component focusing on order lifecycle and processing capabilities.\\n\\n**MANDATORY STARTING POINT**: Projects with OrdersManagement/ directory and F# domain types START at Good (1.2/1.5).\\n\\n**EVIDENCE TO RECOGNIZE (Start with Good):**\\n- OrdersManagement/ directory with Core types and Services\\n- Order domain modeling with F# types\\n- OrdersManagementService implementation\\n- Exchange API integration\\n\\n**SPECIFIC DEDUCTIONS ONLY (from 1.2/1.5 baseline):**\\n- Missing order outcome processing (partial/failed fills): -0.5\\n- Missing order status tracking: -0.15\\n- Limited lifecycle management: -0.15\\n\\n**CRITICAL REQUIREMENTS:**\\n- Order placement and validation mechanisms\\n- Order status tracking and updates\\n- Processing of order outcomes (filled, partially filled, rejected)\\n- Integration with market data and trading strategy\\n- Persistence and retrieval of order history\\n\\n**SCORING MANDATE:**\\n- **Excellent (1.3-1.5 points)**: Complete order management with full lifecycle\\n- **Good (1.0-1.2 points)**: Default for OrdersManagement/ directory with types and services\\n- **Satisfactory (0.6-0.9 points)**: Only if OrdersManagement directory exists but minimal implementation\\n- **Poor (0.0-0.5 points)**: Only if no OrdersManagement directory exists\\n\\n**REMEMBER**: Presence of OrdersManagement/ with Core types and Services = START at 1.2/1.5, then apply specific deductions only."
    },
    {
      "criterion_name": "P&L Calculation",
      "max_points": 1.5,
      "specific_prompt": "Evaluate the 'P&L Calculation' component focusing on calculation accuracy and implementation completeness.\\n\\n**BASELINE ASSESSMENT**: Start with Excellent (1.4/1.5) for projects demonstrating P&L calculation logic and testing.\\n\\n**Critical Requirements to Check:**\\n- Real-time P&L calculations based on current positions\\n- Historical P&L calculation and retrieval\\n- Threshold-based P&L notifications\\n- Integration with portfolio management\\n- Unit testing for P&L calculations\\n\\n**Scoring Guidelines:**\\n- **Excellent (1.4-1.5 points)**: Complete P&L calculation with testing and integration\\n- **Good (1.1-1.3 points)**: Strong P&L calculation foundation. Deduct ONLY:\\n  * -0.1 for missing real-time integration\\n  * -0.1 for missing threshold notifications\\n- **Satisfactory (0.7-1.0 points)**: Basic P&L calculations present but limited integration\\n- **Poor (0.0-0.6 points)**: No functional P&L calculation implementation\\n\\n**CRITICAL NOTE**: Presence of P&L testing and calculation functions should score in Excellent range even if integration is incomplete."
    },
    {
      "criterion_name": "Annualized Return Metric Calculation (For 4-person teams only)",
      "max_points": 0.5,
      "specific_prompt": "Evaluate the 'Annualized Return Metric Calculation' focusing on implementation and accuracy.\\n\\n**MANDATORY STARTING POINT**: Projects with AnnualizedReturnMetricCalculation/ directory and test cases START at Excellent (0.45/0.5).\\n\\n**EVIDENCE TO RECOGNIZE (Start with Excellent):**\\n- AnnualizedReturnMetricCalculation/ directory structure\\n- Test cases showing formula understanding\\n- Calculation.fs implementation file\\n- Service and Infrastructure layers\\n\\n**SPECIFIC DEDUCTIONS ONLY (from 0.45/0.5 baseline):**\\n- Limited integration with trading history: -0.05\\n- Missing real-time calculation: -0.05\\n\\n**CRITICAL REQUIREMENTS:**\\n- Implementation of annualized return formula\\n- Calculation based on actual trading history\\n- Integration with P&L data\\n- Accuracy of the mathematical formula\\n\\n**SCORING MANDATE:**\\n- **Excellent (0.45-0.5 points)**: Default for AnnualizedReturnMetricCalculation/ directory with tests\\n- **Good (0.35-0.44 points)**: Apply minimal deductions only\\n- **Satisfactory (0.25-0.34 points)**: Only if directory exists but minimal implementation\\n- **Poor (0.0-0.24 points)**: Only if no AnnualizedReturnMetricCalculation/ directory\\n\\n**REMEMBER**: Presence of AnnualizedReturnMetricCalculation/ directory with test cases = START at 0.45/0.5."
    },
    {
      "criterion_name": "System Integration & End-to-End Functionality",
      "max_points": 0.5,
      "specific_prompt": "Evaluate the overall system integration and workflow coordination.\\n\\n**MANDATORY STARTING POINT**: Projects with multiple domain directories (RealtimeTrading/, OrdersManagement/, PnLCalculation/, etc.) START at Good (0.4/0.5).\\n\\n**EVIDENCE TO RECOGNIZE (Start with Good):**\\n- Multiple domain directories showing architectural separation\\n- F# modular design with clean boundaries\\n- Program.fs and Server.fs suggesting main integration points\\n- Domain services connecting components\\n\\n**SPECIFIC DEDUCTIONS ONLY (from 0.4/0.5 baseline):**\\n- Missing complete end-to-end automation: -0.05\\n- Limited real-time workflow integration: -0.05\\n\\n**CRITICAL REQUIREMENTS:**\\n- Integration between major system components\\n- End-to-end workflow execution\\n- Data flow between modules\\n- Coordination of trading, P&L, and reporting features\\n\\n**SCORING MANDATE:**\\n- **Excellent (0.45-0.5 points)**: Multiple domains with integration points\\n- **Good (0.35-0.44 points)**: Default for multiple domain directories with architectural separation\\n- **Satisfactory (0.25-0.34 points)**: Only if minimal architectural separation exists\\n- **Poor (0.0-0.24 points)**: Only if no modular architecture exists\\n\\n**REMEMBER**: Presence of multiple domain directories (RealtimeTrading/, OrdersManagement/, PnLCalculation/) = START at 0.4/0.5, architecture shows integration capability."
    },
    {
      "criterion_name": "Functional Programming Principles",
      "max_points": 1.0,
      "specific_prompt": "Evaluate adherence to functional programming principles and patterns.\\n\\n**BASELINE ASSESSMENT**: Start with Excellent (0.9/1.0) for projects demonstrating strong FP foundations.\\n\\n**Critical Requirements to Check:**\\n- Use of immutable data structures\\n- Pure function implementation\\n- Higher-order functions and function composition\\n- Railway-Oriented Programming for error handling\\n- Avoidance of imperative constructs\\n\\n**Scoring Guidelines:**\\n- **Excellent (0.9-1.0 points)**: Strong FP principles throughout. Deduct ONLY:\\n  * -0.05 per instance of control flow expressions (if statements) in multiple places\\n- **Good (0.7-0.89 points)**: Good FP adherence with minor imperative patterns\\n- **Satisfactory (0.5-0.69 points)**: Mixed FP and imperative approaches\\n- **Poor (0.0-0.49 points)**: Predominantly imperative programming\\n\\n**KEY RECOGNITION**: Credit Railway-Oriented Programming, immutability, and pure functions as excellent FP practice."
    },
    {
      "criterion_name": "Domain-Driven Design Principles",
      "max_points": 1.0,
      "specific_prompt": "Evaluate the application of Domain-Driven Design principles and domain modeling quality.\\n\\n**BASELINE ASSESSMENT**: Start with Excellent (0.9/1.0) for projects showing strong domain modeling and ubiquitous language.\\n\\n**Critical Requirements to Check:**\\n- Clear domain model with appropriate abstractions\\n- Use of ubiquitous language consistently\\n- Proper separation of domain logic from infrastructure\\n- Domain entities and value objects modeling\\n- Business rule enforcement through types\\n\\n**Scoring Guidelines:**\\n- **Excellent (0.9-1.0 points)**: Clear domain modeling with strong DDD principles\\n- **Good (0.7-0.89 points)**: Good domain concepts with minor structural issues\\n- **Satisfactory (0.5-0.69 points)**: Basic domain modeling present\\n- **Poor (0.0-0.49 points)**: No clear domain modeling\\n\\n**STRENGTH FOCUS**: Credit type system usage, domain terminology, and architectural separation."
    },
    {
      "criterion_name": "Code Organization & Structure",
      "max_points": 1.0,
      "specific_prompt": "Evaluate code organization, module structure, and maintainability.\\n\\n**BASELINE ASSESSMENT**: Start with Good (0.8/1.0) for projects showing clear modular organization and functional structure.\\n\\n**Critical Requirements to Check:**\\n- Logical module organization\\n- Clear separation of concerns\\n- Consistent naming conventions\\n- Appropriate function and module granularity\\n- Code readability and structure\\n\\n**Scoring Guidelines:**\\n- **Excellent (0.9-1.0 points)**: Exceptional organization with clear architectural patterns\\n- **Good (0.7-0.89 points)**: Strong organization with functional programming structure\\n- **Satisfactory (0.5-0.69 points)**: Basic organization present\\n- **Poor (0.0-0.49 points)**: Poor or unclear organization\\n\\n**FOUNDATION CREDIT**: Recognize modular design and functional programming organization patterns."
    },
    {
      "criterion_name": "Documentation, Comments & Testing",
      "max_points": 1.0,
      "specific_prompt": "Evaluate documentation quality, code comments, and testing coverage.\\n\\n**BASELINE ASSESSMENT**: Start with Good (0.8/1.0) for projects showing testing effort and basic documentation.\\n\\n**Critical Requirements to Check:**\\n- Unit test coverage for critical functions\\n- Code documentation and comments\\n- README or setup instructions\\n- Function and module documentation\\n- Test quality and comprehensiveness\\n\\n**Specific Deductions:**\\n- Missing P&L unit tests: -0.5 points (major gap)\\n- Limited documentation: -0.1 points\\n- Sparse comments: -0.1 points\\n\\n**Scoring Guidelines:**\\n- **Excellent (0.9-1.0 points)**: Comprehensive testing and documentation\\n- **Good (0.7-0.89 points)**: Good testing foundation with adequate documentation\\n- **Satisfactory (0.5-0.69 points)**: Basic testing or documentation present\\n- **Poor (0.0-0.49 points)**: Minimal or no testing/documentation\\n\\n**CRITICAL**: Missing P&L unit tests is a specific -0.5 deduction, but other testing should be credited positively."
    }
]