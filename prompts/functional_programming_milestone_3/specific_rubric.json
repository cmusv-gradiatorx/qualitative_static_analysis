[
    {
      "criterion_name": "Real-time Trading System",
      "max_points": 2.0,
      "specific_prompt": "Evaluate the 'Real-time Trading System' component focusing on completeness and integration.\\n\\n**RECOGNITION-FIRST APPROACH**: Begin by acknowledging the substantial implementation effort and technical sophistication demonstrated in building a real-time trading system.\\n\\n**ACHIEVEMENT RECOGNITION (Emphasize Heavily):**\\n- RealtimeTrading/ directory with sophisticated real-time system architecture\\n- WebSocket connectivity and real-time data processing capabilities\\n- Order management integration and execution logic\\n- Agent-based or concurrent processing implementations\\n- Professional real-time system development approach\\n\\n**TECHNICAL COMPLEXITY CREDIT**: Real-time trading systems represent some of the most challenging software engineering domains, involving concurrent processing, real-time data streams, order management, and financial accuracy requirements.\\n\\n**TECHNICAL DEBT vs. IMPLEMENTATION FAILURES**:\\nMost issues should be classified as technical debt or refinement opportunities:\\n- Hardcoded parameters: Configuration management enhancement\\n- Manual intervention requirements: Automation opportunity\\n- Integration gaps: System coordination refinement\\n\\n**DEDUCTION RESTRAINT**: Apply minimal deductions only for complete absence of core functionality. Missing integration or manual steps are refinement areas that don't negate the substantial achievement of implementing real-time trading logic."
    },
    {
      "criterion_name": "Orders Management",
      "max_points": 1.5,
      "specific_prompt": "Evaluate the 'Orders Management' component focusing on order processing capabilities.\\n\\n**ACHIEVEMENT RECOGNITION (Emphasize Heavily):**\\n- OrdersManagement/ directory with comprehensive order processing architecture\\n- Order submission, status tracking, and outcome processing\\n- Integration with exchange APIs and order execution\\n- Domain modeling for order types and status management\\n- Professional order management system development\\n\\n**TECHNICAL SOPHISTICATION CREDIT**: Order management systems require complex state management, API integration, error handling, and financial accuracy - representing significant technical achievement.\\n\\n**TECHNICAL DEBT vs. IMPLEMENTATION FAILURES**:\\n- Missing order outcome processing: Feature completeness enhancement\\n- Limited status tracking: System monitoring refinement\\n- Integration complexity: Coordination opportunity\\n\\n**DEDUCTION RESTRAINT**: Credit the substantial achievement of building order management capabilities. Missing features or integration gaps are enhancement opportunities rather than fundamental failures."
    },
    {
      "criterion_name": "P&L Calculation",
      "max_points": 1.5,
      "specific_prompt": "Evaluate the 'P&L Calculation' component focusing on accuracy and implementation completeness.\\n\\n**ACHIEVEMENT RECOGNITION (Emphasize Heavily):**\\n- P&L calculation logic and financial computation accuracy\\n- Real-time P&L updates and calculation triggers\\n- Integration with trading data and order outcomes\\n- Domain modeling for financial calculations and metrics\\n- Testing effort for critical financial logic\\n\\n**FINANCIAL CALCULATION COMPLEXITY**: P&L calculations require precise financial logic, real-time updates, data integration, and accuracy validation - representing sophisticated domain implementation.\\n\\n**TECHNICAL DEBT vs. IMPLEMENTATION FAILURES**:\\n- Missing quantity retention: Data management enhancement\\n- Integration timing issues: System coordination refinement\\n- Manual calculation triggers: Automation opportunity\\n\\n**DEDUCTION RESTRAINT**: Recognize the complexity of implementing accurate financial calculations. Missing automation or integration features are refinement areas."
    },
    {
      "criterion_name": "Annualized Return Metric Calculation",
      "max_points": 0.5,
      "specific_prompt": "Evaluate the 'Annualized Return Metric Calculation' focusing on implementation and accuracy.\\n\\n**ACHIEVEMENT RECOGNITION (Emphasize Heavily):**\\n- AnnualizedReturnMetricCalculation/ directory with metric computation logic\\n- Financial calculation accuracy and formula implementation\\n- Testing coverage for calculation scenarios\\n- Domain modeling for return metrics and time periods\\n- Professional financial metric development approach\\n\\n**FINANCIAL METRIC COMPLEXITY**: Annualized return calculations require sophisticated financial formulas, time period handling, and accuracy validation.\\n\\n**TECHNICAL DEBT vs. IMPLEMENTATION FAILURES**:\\n- Missing REST API endpoints: Feature completeness enhancement\\n- Limited test scenarios: Testing sophistication development\\n- Integration gaps: System coordination opportunity\\n\\n**DEDUCTION RESTRAINT**: Credit the achievement of implementing complex financial metrics. Missing features are enhancement opportunities."
    },
    {
      "criterion_name": "System Integration",
      "max_points": 0.5,
      "specific_prompt": "Evaluate the overall system integration and workflow coordination.\\n\\n**ACHIEVEMENT RECOGNITION (Emphasize Heavily):**\\n- Multiple domain directories demonstrating architectural sophistication\\n- Component integration and workflow coordination\\n- Data flow between trading, orders, and P&L systems\\n- System orchestration and dependency management\\n- Professional system architecture development\\n\\n**SYSTEM INTEGRATION COMPLEXITY**: Coordinating multiple complex domains (real-time trading, order management, financial calculations) represents significant architectural achievement.\\n\\n**TECHNICAL DEBT vs. IMPLEMENTATION FAILURES**:\\n- Manual coordination steps: Automation enhancement\\n- Component separation: Integration refinement\\n- Workflow gaps: System coordination opportunity\\n\\n**DEDUCTION RESTRAINT**: Recognize the substantial achievement of building multiple integrated domains. Manual steps or coordination gaps are refinement areas."
    },
    {
      "criterion_name": "Functional Programming Principles",
      "max_points": 1.0,
      "specific_prompt": "Evaluate adherence to functional programming principles and patterns.\\n\\n**ACHIEVEMENT RECOGNITION (Emphasize Heavily):**\\n- Immutable data structures and pure function design\\n- Railway-Oriented Programming for error handling\\n- Functional composition and pipeline usage\\n- Pattern matching and discriminated unions\\n- Extensive use of map, filter, reduce operations\\n\\n**FUNCTIONAL PROGRAMMING SOPHISTICATION**: Demonstrating advanced F# patterns across multiple complex domains represents significant functional programming mastery.\\n\\n**TECHNICAL DEBT vs. IMPLEMENTATION FAILURES**:\\n- Occasional imperative constructs: Refinement opportunities\\n- Control flow expressions: Style enhancement areas\\n- Global state usage: Design choice in concurrent systems\\n\\n**DEDUCTION RESTRAINT**: Credit extensive functional programming adoption. Minor imperative constructs are refinement opportunities in complex systems."
    },
    {
      "criterion_name": "Domain-Driven Design",
      "max_points": 1.0,
      "specific_prompt": "Evaluate the application of Domain-Driven Design principles and domain modeling quality.\\n\\n**ACHIEVEMENT RECOGNITION (Emphasize Heavily):**\\n- Clear domain model with appropriate primitive and composite types\\n- Ubiquitous language reflected in code structure\\n- Domain boundaries and bounded contexts\\n- Rich domain types and value objects\\n- Professional domain modeling approach\\n\\n**DOMAIN MODELING SOPHISTICATION**: Implementing sophisticated domain models across trading, financial, and order management domains represents advanced DDD application.\\n\\n**TECHNICAL DEBT vs. IMPLEMENTATION FAILURES**:\\n- Domain boundary mixing: Architectural refinement\\n- Missing domain services: Design enhancement\\n- Type system opportunities: Modeling refinement\\n\\n**DEDUCTION RESTRAINT**: Credit substantial domain modeling effort. Boundary issues are architectural refinement opportunities."
    },
    {
      "criterion_name": "Code Organization",
      "max_points": 1.0,
      "specific_prompt": "Evaluate code organization, module structure, and maintainability.\\n\\n**ACHIEVEMENT RECOGNITION (Emphasize Heavily):**\\n- Logical module organization and functional structure\\n- Clear separation of concerns and layer boundaries\\n- Consistent naming conventions and code style\\n- Professional code organization approach\\n- Multiple domain directories with proper structure\\n\\n**ORGANIZATIONAL SOPHISTICATION**: Organizing complex multi-domain systems with clear structure represents significant architectural thinking.\\n\\n**TECHNICAL DEBT vs. IMPLEMENTATION FAILURES**:\\n- Module placement inconsistencies: Organizational refinement\\n- Naming convention variations: Style enhancement\\n- Structure optimization opportunities: Architectural refinement\\n\\n**DEDUCTION RESTRAINT**: Credit substantial organizational effort. Structure variations are refinement opportunities."
    },
    {
      "criterion_name": "Documentation and Testing",
      "max_points": 1.0,
      "specific_prompt": "Evaluate documentation quality, code comments, and testing coverage.\\n\\n**ACHIEVEMENT RECOGNITION (Emphasize Heavily):**\\n- Unit test coverage for critical functions\\n- Testing of financial calculations and business logic\\n- Code documentation and comment quality\\n- Professional testing and documentation approach\\n- Testing effort across multiple domains\\n\\n**TESTING COMPLEXITY**: Testing complex financial and trading logic requires sophisticated test design and scenario coverage.\\n\\n**TECHNICAL DEBT vs. IMPLEMENTATION FAILURES**:\\n- Limited test granularity: Testing sophistication development\\n- Missing documentation: Documentation enhancement\\n- Coverage gaps: Testing expansion opportunity\\n\\n**DEDUCTION RESTRAINT**: Credit testing effort and documentation attempts. Coverage gaps are enhancement opportunities."
    }
]